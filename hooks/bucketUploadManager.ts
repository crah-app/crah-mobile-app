import { Platform } from 'react-native';
import * as FileSystem from 'expo-file-system';
import { AudioFile, VideoMeta } from '@/types';
import { getMIMEType } from '@/utils/globalFuncs';
import { useAuth } from '@clerk/clerk-expo';
import axios from 'axios';
import { PhotoFile, VideoFile } from 'react-native-vision-camera';

export async function uploadSource(
	source: VideoFile | PhotoFile | AudioFile, // in case of a photo, video or audio file
	clerkToken: string,
	userId: string,
	setLoadingSourceProgress: (progress: number) => void,
) {
	return new Promise(async (res, rej) => {
		try {
			const fileUri = source.path;
			const fileName = source.path.split('/').pop();

			const token = clerkToken;
			// const token = await getToken();

			console.log('loaded token:', token);

			// 1. server request sending video meta-data via body
			const response = await fetch(
				'http://192.168.0.136:4000/api/source/create-upload',
				{
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						Authorization: `Bearer ${token}`,
						mode: 'cors',
					},
					body: JSON.stringify({
						userId,
						filename: fileName,
						duration: 'duration' in source ? source.duration : 0,
						height: source.height,
						width: source.width,
						contentType: getMIMEType(fileName as string),
					}),
				},
			);

			if (!response.ok)
				throw new Error('server could not prepare a source upload');

			const { url, videoId, key } = await response.json();
			const fileLocation = fileUri.includes('file://')
				? fileUri
				: `file://${fileUri}`;

			console.log('source url generated by server:', url);

			// 2. get file from Blob / ArrayBuffer
			const fileData = await FileSystem.readAsStringAsync(fileLocation, {
				encoding: FileSystem.EncodingType.Base64,
			});
			const binary = atob(fileData);
			const len = binary.length;
			const bytes = new Uint8Array(len);
			for (let i = 0; i < len; i++) bytes[i] = binary.charCodeAt(i);

			// 3. XMLHttpRequest Upload
			const xhr = new XMLHttpRequest();

			xhr.open('PUT', url);

			xhr.setRequestHeader('Content-Type', getMIMEType(fileName as string));

			xhr.upload.onprogress = (e) => {
				if (e.lengthComputable) {
					const percent = (e.loaded / e.total) * 100;
					console.log(`Upload progress: ${percent.toFixed(2)}%`);
					setLoadingSourceProgress(Number(percent.toFixed(2)));
				}
			};

			xhr.onload = async () => {
				if (xhr.status === 200 || xhr.status === 204) {
					console.log('✅ source uploaded successfully!');
					console.log(url);

					await axios.post(
						'http://192.168.0.136:4000/api/source/mark-source-as-uploaded',
						{
							videoId,
						},
					);

					setLoadingSourceProgress(100);
					res(`https://pub-78edb5b6f0d946d28db91b59ddf775af.r2.dev/${key}`);
				} else {
					console.error('❌ Error uploading video:', xhr.statusText);
				}
			};

			xhr.onerror = (e) => {
				console.error('❌ A network error occured uploading video', e);
			};

			xhr.send(bytes.buffer); // send video as array-buffer
		} catch (error) {
			console.error('❌ Error during video-upload:', error);
			rej(error);
		}
	});
}
